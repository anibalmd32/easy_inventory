/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as GuestRouteRouteImport } from './routes/guest/route'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as GuestIndexRouteImport } from './routes/guest/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'

const GuestRouteRoute = GuestRouteRouteImport.update({
  id: '/guest',
  path: '/guest',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const GuestIndexRoute = GuestIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GuestRouteRoute,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/guest': typeof GuestRouteRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/guest/': typeof GuestIndexRoute
}
export interface FileRoutesByTo {
  '/admin': typeof AdminIndexRoute
  '/auth': typeof AuthIndexRoute
  '/guest': typeof GuestIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/admin': typeof AdminRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/guest': typeof GuestRouteRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/guest/': typeof GuestIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/admin' | '/auth' | '/guest' | '/admin/' | '/auth/' | '/guest/'
  fileRoutesByTo: FileRoutesByTo
  to: '/admin' | '/auth' | '/guest'
  id:
    | '__root__'
    | '/admin'
    | '/auth'
    | '/guest'
    | '/admin/'
    | '/auth/'
    | '/guest/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  GuestRouteRoute: typeof GuestRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/guest': {
      id: '/guest'
      path: '/guest'
      fullPath: '/guest'
      preLoaderRoute: typeof GuestRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/guest/': {
      id: '/guest/'
      path: '/'
      fullPath: '/guest/'
      preLoaderRoute: typeof GuestIndexRouteImport
      parentRoute: typeof GuestRouteRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface GuestRouteRouteChildren {
  GuestIndexRoute: typeof GuestIndexRoute
}

const GuestRouteRouteChildren: GuestRouteRouteChildren = {
  GuestIndexRoute: GuestIndexRoute,
}

const GuestRouteRouteWithChildren = GuestRouteRoute._addFileChildren(
  GuestRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AdminRouteRoute: AdminRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  GuestRouteRoute: GuestRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
